#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <unordered_map>
#include <string>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

static const int ALPHABET_SIZE = 26;
vector<int> adjList[100000];
vector<int> bitmaskArray;
int n1;

void dfsPalindromeTree(int u, int p, const string &s) {
    for (int v : adjList[u]) {
        if (v == p) continue;
        bitmaskArray[v] = bitmaskArray[u] ^ (1 << (s[v] - 'a'));
        dfsPalindromeTree(v, u, s);
    }
}

long long countPalindromePaths(vector<int>& parent, const string &s) {
    n1 = parent.size();
    for(int i=0; i<n1; i++) adjList[i].clear();
    for(int i=1; i<n1; i++){
        adjList[parent[i]].push_back(i);
        adjList[i].push_back(parent[i]);
    }
    bitmaskArray.assign(n1, 0);
    dfsPalindromeTree(0, -1, s);
    unordered_map<int, long long> freq;
    long long ans=0;
    for(int i=0; i<n1; i++){
        int b = bitmaskArray[i];
        ans += freq[b];
        for(int j=0; j<ALPHABET_SIZE; j++){
            int x = b ^ (1<<j);
            if(freq.find(x)!=freq.end()) ans += freq[x];
        }
        freq[b]++;
    }
    return ans;
}

void inorderKth(TreeNode* root, int& k, int& ans) {
    if(!root) return;
    inorderKth(root->left, k, ans);
    k--;
    if(k==0) {
        ans = root->val;
        return;
    }
    inorderKth(root->right, k, ans);
}

int kthSmallest(TreeNode* root, int k) {
    int ans=-1;
    inorderKth(root, k, ans);
    return ans;
}

vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> res;
    if(!root) return res;
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty()){
        int sz=q.size();
        vector<int> level;
        for(int i=0;i<sz;i++){
            TreeNode* f=q.front();q.pop();
            level.push_back(f->val);
            if(f->left) q.push(f->left);
            if(f->right) q.push(f->right);
        }
        res.push_back(level);
    }
    return res;
}

bool sameTree(TreeNode* p, TreeNode* q) {
    if(!p && !q) return true;
    if(!p || !q) return false;
    if(p->val!=q->val) return false;
    return sameTree(p->left,q->left) && sameTree(p->right,q->right);
}

vector<int> inorderTraversal(TreeNode* root) {
    vector<int> ans;
    stack<TreeNode*> st;
    TreeNode* cur=root;
    while(cur||!st.empty()){
        while(cur){
            st.push(cur);
            cur=cur->left;
        }
        cur=st.top();st.pop();
        ans.push_back(cur->val);
        cur=cur->right;
    }
    return ans;
}

int main(){
    {
        vector<int> parent = {-1,0,0,1,1,2};
        string s="acaabc";
        cout<<countPalindromePaths(parent,s)<<endl;
    }
    {
        TreeNode* root=new TreeNode(3);
        root->left=new TreeNode(1);
        root->right=new TreeNode(4);
        root->left->right=new TreeNode(2);
        cout<<kthSmallest(root,1)<<endl;
    }
    {
        TreeNode* root=new TreeNode(3);
        root->left=new TreeNode(9);
        root->right=new TreeNode(20);
        root->right->left=new TreeNode(15);
        root->right->right=new TreeNode(7);
        auto ans=levelOrder(root);
        for(auto &lvl:ans){
            cout<<"[";
            for(int i=0;i<(int)lvl.size();i++){
                cout<<lvl[i];
                if(i+1<(int)lvl.size()) cout<<",";
            }
            cout<<"] ";
        }
        cout<<endl;
    }
    {
        TreeNode* p=new TreeNode(1);
        p->left=new TreeNode(2);
        p->right=new TreeNode(3);
        TreeNode* q=new TreeNode(1);
        q->left=new TreeNode(2);
        q->right=new TreeNode(3);
        cout<<(sameTree(p,q)?"true":"false")<<endl;
    }
    {
        TreeNode* root=new TreeNode(1);
        root->right=new TreeNode(2);
        root->right->left=new TreeNode(3);
        auto in=inorderTraversal(root);
        cout<<"[";
        for(int i=0;i<(int)in.size();i++){
            cout<<in[i];
            if(i+1<(int)in.size()) cout<<",";
        }
        cout<<"]"<<endl;
    }
    return 0;
}
